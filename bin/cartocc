#!/usr/bin/env node
var cartocc = require('../lib/cartocc');
var fs = require('fs');
var path = require('path');

function help () {
    console.log('\
    CartoCC usage: \n\
    \n\
    ** path mode **\n\
    $ cartocc <path-to-project.mml> <path-to-config.json> [ <path-to-output.mml>]\n\
    If no <path-to-output.mml> is given, stdout is used.\n\
    \n\
    ** project mode **\n\
    $ cartocc <project-name>\n\
    This will loor for a `<project-name>.mml` and a `cartocc.json` file in the <project-name> project dir.\n\
    Customized config will be output in `project.mml` file in the <project-name> directory.');
}

/**
 * Run from command line
 */
function run () {
    var args = process.argv.slice(2),
        mml, rules, output, mml_path, rules_path;
    if (args.length > 1) { // path mode
        mml_path = args[0];
        rules_path = args[1];
        if (args[2]) {
            output = args[2];
        }
    }
    else if (args.length == 1) { // project mode
        var tilemill_config = JSON.parse(fs.readFileSync(path.join(process.env.HOME, '.tilemill/config.json'), 'utf8')),
            tilemill_dir = tilemill_config.files || path.join(process.env.HOME, "Documents/MapBox"),
            project_name = args[0],
            project_path = path.join(tilemill_dir, 'project', project_name);
        if (!fs.existsSync(project_path)) {
            console.log('[cartocc] project dir not found at ' + project_path);
            process.exit(1);
        }
        mml_path = path.join(project_path, project_name + '.mml');
        rules_path = path.join(project_path, 'cartocc.json');
        output = path.join(project_path, 'project.mml');
    }
    else {
        help();
        process.exit(1);
    }
    if (!fs.existsSync(mml_path)) {
        console.log('[cartocc] mml file not found at ' + mml_path);
        process.exit(1);
    }
    if (!fs.existsSync(rules_path)) {
        console.log('[cartocc] rules file not found at ' + rules_path);
        process.exit(1);
    }
    mml = fs.readFileSync(mml_path, 'utf8');
    rules = fs.readFileSync(rules_path, 'utf8');
    c = new cartocc.CartoCC(mml, rules);
    c.process();
    if (output) {
        fs.writeFileSync(output, c.output());
        console.log('[cartocc] Customized config has been written to ' + output);
    }
    else {
        process.stdout.write(c.output());
    }
}
if (!module.parent) {
    run();
}
